WebApi笔记


****************************************分界线：了解WebApi基本概念。测试案例FirstWebApi

什么是Web API?
简单地说，API是一种具有一组函数的接口，允许程序员访问应用程序、操作系统或其他服务的特定特性或数据。
Web API是一种可以使用HTTP协议访问的Web API。它是一种概念而不是一种技术。
我们可以使用不同的技术来构建Web API，如Java .net等。
例如Twitter的REST api提供了对读和写数据的编程访问，我们可以使用它将Twitter的功能集成到我们自己的应用程序中。


Web API特性
是构建RESTful服务的理想平台。
将HTTP动词映射到方法名。
支持不同格式的响应数据。内置支持JSON, XML, BSON格式。
可以托管在IIS、自托管或其他支持。
Web API框架包括新的HttpClient与Web API服务器通信。HttpClient可以在ASP.MVC服务器端中使用，Windows窗体应用程序，控制台应用程序或其他应用程序。


Web API Controller
Web API控制器类似于asp.net MVC控制器。它处理传入的HTTP请求并将响应发送回调用者。并且必须派生自System.Web.Http.ApiController类。控制器的所有公共方法都称为动作方法。
根据传入的请求URL和HTTP动词(GET/POST/PUT/PATCH/DELETE),Web API决定执行哪些Web API控制器和操作方法如 GET()方法将处理HTTP GET请求,POST()方法将处理HTTP POST请求,PUT()方法将处理HTTP PUT请求和DELETE()方法将为上述Web API处理HTTP DELETE请求。
如果你想写的方法不是以HTTP动词开始，那么你可以应用适当的HTTP动词属性在方法上，如HttpGet, HttpPost, HttpPut等，就像MVC控制器一样。
Web API控制器特性
它必须派生自System.Web.Http.ApiController类。
它可以在项目根文件夹的任何文件夹下创建。但是，建议按照约定在Controllers文件夹中创建controller类。
动作方法名称可以与HTTP动词名称相同，或者它可以以带有任何后缀的HTTP动词开头(大小写敏感)，或者您可以将HTTP动词属性应用于方法。
操作方法的返回类型可以是任何基本类型或复杂类型。
Web API控制器中的操作方法名称扮演着重要的角色。动作方法名可以与HTTP动词(如Get、Post、Put、Patch或Delete)相同。但是，您可以使用HTTP动词附加任何后缀以提高可读性。例如，Get方法可以是GetAllNames()、GetStudents()或以Get开头的任何其他名称。


配置Web API
Web API支持基于代码的配置。不能在web.config中配置。我们可以配置Web API来定制Web API托管基础设施和组件的行为，如路由、格式化程序、过滤器、依赖解析器、消息处理程序、参数、属性、服务等。
Web API项目在App_Start文件夹中包含默认的WebApiConfig类，还包含Global.asax


Web API的路由Routing
Web API路由类似于ASP.net MVC路由。它将传入的HTTP请求路由到Web API控制器上的特定操作方法。
Web API支持两种路由:传统路由；特性路由。
传统路由：Web API使用路由模板来确定要执行哪个控制器和操作方法。为了处理各种HTTP请求，必须在路由表中添加至少一个路由模板。
可以使用HttpConfiguration对象在Web API中配置多个路由。
特性路由：使用[Route()]属性来定义路由。Route属性可以应用于任何控制器或操作方法。

路由：
1 启动 Application_Start--WebApiConfig.Register--把路由规则写入一个容器
2 运行 请求会去容器匹配--找到第一个满足的控制器--然后找action（http method）：
       a 以特性为准 [HttpGet]
       b 以Get开头
       c (找方法时)优先最匹配  api/values/1--Get(int id)
       
   一个资源，同一种操作更新，可能有多个来源途径
   版本号：v1/v2
   
   特性路由：
   1 config.MapHttpAttributeRoutes();
   2 控制器/action都可以写特性



参数绑定
Web API控制器中的操作方法可以有一个或多个不同类型的参数。它可以是基本类型，也可以是复杂类型。
Web API根据参数类型将操作方法参数绑定到URL的查询字符串或请求主体request body。
默认情况下，如果参数类型是.net基本类型，比如int、bool、double、string、GUID、DateTime、decimal或任何其他可以从string类型转换的类型，那么它将设置查询字符串中的参数值。
如果参数类型是复杂类型，那么默认情况下，Web API尝试从请求体获取值。

查询字符串参数名和操作方法参数名必须相同(不区分大小写)。如果名称不匹配，则不会设置参数的值。参数的顺序可以不同。

Web API将从请求主体中提取JSON对象，并自动将其转换为复杂对象，因为JSON对象属性的名称与Student类属性的名称相匹配(不区分大小写)。
控制器方法包含了基本类型参数和复杂类型参数。因此，在默认情况下，Web API将从查询字符串中获取基本数据类型参数，从请求主体中获取复杂类型参数。
Post操作方法不能包含多个复杂类型参数，因为最多允许从请求主体读取一个参数。


[FromUri] and [FromBody]
在默认情况下，Web API从查询字符串中获取原语参数的值，从请求主体中获取复杂类型参数。但是，如果我们想要改变这种默认行为呢?
使用[FromUri]属性强制Web API从查询字符串中获取复杂类型的值，使用[FromBody]属性从请求主体中获取原始类型的值，与默认规则相反。
使用[FromUri]属性时复杂类型属性的名称和查询字符串参数必须匹配。
使用[FromBody]属性只能应用于操作方法的一个基本参数。它不能应用于同一动作方法的多个基本参数。


Action Method Return Type
Web API操作方法可以有以下返回类型。
Void 
Primitive type ：基本数据类型
Complex type ：自定义复杂数据类型
HttpResponseMessage：Web API控制器总是向托管基础结构返回一个HttpResponseMessage对象。从动作方法发送HttpResponseMessage的好处是，您可以按照自己的方式配置响应。您可以根据需要设置状态码、内容或错误消息(如果有的话)。return Request.CreateResponse(HttpStatusCode.OK, stud);
IHttpActionResult：您可以创建自己的实现IHttpActionResult的类，或者使用ApiController类的各种方法来返回实现IHttpActionResult的对象。return Ok(stud);
下面列出了ApiController类的所有方法，这些方法返回实现IHttpActionResult接口的类的对象。
BadRequest()创建一个状态代码为400的BadRequestResult对象。
Conflict()创建一个状态代码为409的ConflictResult对象。
Content()创建一个具有指定状态代码和数据的NegotiatedContentResult。
Created()创建一个状态代码201 Created的CreatedNegotiatedContentResult。
CreatedAtRoute()创建一个状态码为201的createdatrouteneatedcontentresult。
InternalServerError()创建一个状态码为500内部服务器错误的内部服务器错误。
NotFound()创建一个状态代码为404的NotFoundResult。
Ok()创建一个状态码为200的OkResult。
Redirect()创建一个状态代码为302的重定向RedirectResult 。
RedirectToRoute()创建一个状态码为302的RedirectToRouteResult。
ResponseMessage()使用指定的HttpResponseMessage创建一个ResponseMessageResult。
StatusCode()使用指定的http状态代码创建一个StatusCodeResult。
Unauthorized()创建一个UnauthorizedResult，状态代码401。



Web API Request/Response Data Formats
Web API请求/响应数据格式
在HTTP请求中，MIME类型使用Accept和Content-Type属性在请求头中指定。Accept头属性指定客户端期望的响应数据的格式，Content-Type头属性指定请求体中的数据格式，以便接收方能够将其解析为适当的格式。
Web API将请求数据转换为CLR对象，并将CLR对象序列化为基于接受头和内容类型头的响应数据。Web API包括对JSON、XML、BSON和form-urlencoded数据的内置支持。这意味着它自动将请求/响应数据转换为这些格式OOB(开箱即用)。
Accept：text/xml
Content-Type: application/json



ASP.NET Web API: Media-Type Formatters  媒体类型格式器
Web API基于接受头和内容类型头（Accept and Content-Type headers）处理JSON和XML格式。但是，它如何处理这些不同的格式呢?答案是:通过使用媒体类型格式化器。
媒体类型格式化器是负责序列化请求/响应数据的类，以便Web API能够理解请求数据格式并以客户端期望的格式发送数据。

Web API包括以下内置媒体类型格式化程序。
Media Type Formatter Class 									--MIME Type 									--Description
JsonMediaTypeFormatter 										--application/json, text/json 				    --Handles JSON format
XmlMediaTypeFormatter 										--application/xml, text/json 					--Handles XML format
FormUrlEncodedMediaTypeFormatter 							--application/x-www-form-urlencoded 			--Handles HTML form URL-encoded data
JQueryMvcFormUrlEncodedFormatter 							--application/x-www-form-urlencoded 			--Handles model-bound HTML form URL-encoded data 



Web API Filters
Web API包括过滤器，用于在操作方法执行之前或之后添加额外的逻辑。过滤器可用于提供横切特性，如日志记录、异常处理、性能度量、身份验证和授权。
下表列出了可用于创建Web API过滤器的重要接口和类。
Filter Type 					--Interface 					--Class 							--Description
Simple Filter 					--IFilter 						--- 								--Defines the methods that are used in a filter
Action Filter 					--IActionFilter 				--ActionFilterAttribute 			--Used to add extra logic before or after action methods execute.
Authentication Filter 			--IAuthenticationFilter 		--- 								--Used to force users or clients to be authenticated before action methods execute.
Authorization Filter 			--IAuthorizationFilter 			--AuthorizationFilterAttribute 		--Used to restrict access to action methods to specific users or groups.
Exception Filter 				--IExceptionFilter 				--ExceptionFilterAttribute 			--Used to handle all unhandled exception in Web API.
Override Filter 				--IOverrideFilter 				--- 								--Used to customize the behaviour of other filter for individual action method. 









在EntityRelationsController中介绍Webapi中EF如何加载相关实体，以及如何在模型类中处理循环导航属性
使用fiddler对api进行测试，再输出日志中查看sql语句验证预先加载、延迟加载和显式加载
有三种方法可以在实体框架中加载相关数据：预先加载、延迟加载和显式加载。


预先加载，则 EF 会将相关实体加载到初始数据库查询中。 若要执行预先加载，请使用system.web.Include扩展方法


延迟加载，EF自动加载相关实体时，要启用延迟加载，请将实体对象的属性的导航属性设置为虚拟virtual：public virtual Author Author { get; set; }  //Virtual navigation property启用延迟加载
延迟加载需要多个数据库行程，因为在每次检索相关实体时 EF 都会发送一个查询。 通常，您希望为您序列化的对象禁用延迟加载。 序列化程序必须读取模型上的所有属性，这将触发加载相关实体
有时可能需要使用延迟加载。 预先加载可能会导致 EF 生成非常复杂的联接。 或者，可能需要一小部分数据的相关实体，延迟加载会更有效。
避免序列化问题的一种方法是序列化数据传输对象（Dto）而不是实体对象。
为序列化关闭延迟加载
延迟加载和序列化不会很好地混合，如果您不小心，只是因为启用了延迟加载，最终就可以对整个数据库进行查询。 大多数序列化程序通过访问类型实例上的每个属性来工作。 属性访问会触发延迟加载，因此会序列化更多的实体。 
在这些实体上，将访问这些实体的属性，甚至还会加载更多实体。 在对实体进行序列化之前，最好关闭延迟加载
延迟加载序列化问题； 会触发延迟加载；Author也将序列化到json中   //可以Author导航属性关闭延迟加载。关闭所有实体的延迟加载：在FirstWebApiEntities上下文对象构造函数中添加this.Configuration.LazyLoadingEnabled = false;


显式加载：即使已禁用延迟加载，仍可能会延迟加载相关实体，但必须通过显式调用来完成此操作。 为此，请对相关实体的条目使用 Load 方法


使用 Query 计算相关实体而不加载它们
有时，了解数据库中与另一个实体相关的实体的数量并不实际产生加载所有这些实体的成本是非常有用的。 带有 LINQ Count 方法的 Query 方法可用于执行此操作

Author和Book属性中存在循环引用时。当 JSON 或 XML 格式化程序尝试序列化时，将引发异常。 这两个格式化程序引发不同的异常消息







web API 将数据库实体公开给客户端。 客户端接收直接映射到数据库表的数据。 但是，这并不总是一个好主意。 有时，您需要更改发送到客户端的数据的形状例如，你可能希望：
删除循环引用（请参阅上一节）。
隐藏客户端不应查看的特定属性。
省略某些属性以减小负载大小。
平展包含嵌套对象的对象图，以使它们更适合客户端。
避免出现 "过度发布" 漏洞。
将服务层与数据库层分离。

若要实现此目的，可以定义数据传输对象（DTO）如Models/DTOs/BookDetailDto 和 Models/DTOs/BookDto







.NET Web应用中为什么要使用async/await异步编程   如：        public async Task<IHttpActionResult> GetBookDetail(int id)

什么是async/await？
await和async是.NET Framework4.5框架、C#5.0语法里面出现的技术，目的是用于简化异步编程模型。

async和await的关系？
async和await是成对出现的。
async出现在方法的声明里，用于批注一个异步方法。光有async是没有意义的。
await出现在方法内部，Task前面。只能在使用async关键字批注的方法中使用await关键字。

private async Task DoSomething()
{
    await Task.Delay(TimeSpan.FromSeconds(10));
}

async/await会创建新的线程吗？
不会。async/await关键字本身是不会创建新的线程的，但是被await的方法内部一般会创建新的线程。

asp.net mvc/webapi action中使用async/await会提高请求的响应速度吗？
不会。


我们都知道web应用不同于winform、wpf等客户端应用，客户端应用为了保证UI渲染的一致性往往都是采用单线程模式，这个UI线程称为主线程，如果在主线程做耗时操作就会导致程序界面假死，所以客户端开发中使用多线程异步编程非常必要。
可web应用本身就是多线程模式，服务器会为每个请求分配工作线程。
既然async/await不能创建新线程，又不能使提高请求的响应速度，那.NET Web应用中为什么要使用async/await异步编程呢？
在 web 服务器上，.NET Framework 维护用于处理 ASP.NET 请求的线程池。 当请求到达时，将调度池中的线程以处理该请求。 如果以同步方式处理请求，则处理请求的线程将在处理请求时处于繁忙状态，并且该线程无法处理其他请求。
在启动时看到大量并发请求的 web 应用中，或具有突发负载（其中并发增长突然增加）时，使 web 服务调用异步会提高应用程序的响应能力。 异步请求与同步请求所需的处理时间相同。 如果请求发出需要两秒钟时间才能完成的 web 服务调用，则该请求将需要两秒钟，无论是同步执行还是异步执行。 但是，在异步调用期间，线程在等待第一个请求完成时不会被阻止响应其他请求。 因此，当有多个并发请求调用长时间运行的操作时，异步请求会阻止请求队列和线程池的增长。



RESTful：架构风格，就是以资源为视角，来描述服务的
         移动互联网：json/xml来描述，http方法 统一了数据操作
表现层的状态转换：资源；统一接口；URI；无状态；
     资源：实体就是资源，json/xml/数据流
     统一接口：CRUD，是通过http的method体现 get post put/patch delete 
     URI：url
     无状态：http无状态 前后没有关联




****************************************分界线：了解WebApi前端和后端调用webapi。

前端调用webapi。测试案例SecondWebApi
通过调试了解webapi传递参数和数据获取
Http协议：无状态的协议  客户端和服务端就是一次性的
客户端->服务端：request header body  文字描述了数据信息,传输内容字符串
服务端->客户端：response header body 解析字符串，拿到关注的信息，完成业务操作，返回字符串，
实例化参数，参数只有两个来源：地址参数；表单参数；
调用方法的参数，都是源于这个解析，其实不解析也都能拿到的，比如HttpContext.Current.Request
参数绑定其实就是webapi遵循自己规则识别参数，也可以重写绑定  IBinder，但是没必要去折腾



后端调用webapi案例 在单元测试UnitTestProject.WebApiTest中调试验证
调用WebApi就是模拟Http请求，httpwebrequest/httpclient





****************************************分界线：IOC是怎么跟WebApi结合
IOC是怎么跟WebApi结合
1 UnityDependencyResolver 实现一个IDependencyResolver，里面用自己的容器UnityContainerFactory；把webapi的DependencyResolver换成自己的Unity版本的
2 启动时config.DependencyResolver=自定义的；在WebApiConfig.Register中注册容器。config.DependencyResolver = new UnityDependencyResolver(UnityContainerFactory.GetContainer());

在控制器构造函数传入容器对象接口参数，可以利用容器自动构造注入。DI  依赖注入

AOP：面向切面编程，可以在不破坏封装的前提下，去增加其他非业务逻辑功能：如：记录日志，异常处理，缓存处理，权限认证等。。。


 注意：配置AOP时比配置DI需要多配置下面两行代码
 <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Unity.Interception.Configuration"/>
 <extension type="Interception"/>


容器配置信息参考ioc.config配置文件格式如下：
 <?xml version="1.0" encoding="utf-8"?>
<unity>
  <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Unity.Interception.Configuration"/>
  <containers>
    <container name="IOCcontainer">
      <extension type="Interception"/>
      <register type="ThirdWebApi.Unity.Interface.DbContext,ThirdWebApi" mapTo="ThirdWebApi.Unity.Service.CustomDbContext, ThirdWebApi"/>
      <register type="ThirdWebApi.Unity.Interface.IUserService,ThirdWebApi" mapTo="ThirdWebApi.Unity.Service.UserService, ThirdWebApi">
      <interceptor type="InterfaceInterceptor"/>
          <interceptionBehavior type="ThirdWebApi.Unity.AOP.LogBeforeBehavior, ThirdWebApi"/>
      </register>
    </container>
  </containers>
</unity>






****************************************分界线：WebApi用户身份验证
用户身份验证
Form身份验证  Basic  window集成 摘要  OAuth
案例使用basic验证；BasicAuthorizeAttribute : AuthorizeAttribute   只要带有BasicAuthorizeAttribute特性的控制器或控制器api都会在api执行前进行身份验证

验证流程
//后端模拟登录，向前端返回加密票证Ticket（用户账号密码加密字符串）可存session中，也可以利用其他缓存技术存储实现多服务器共享用户身份验证，跨域验证。。。
[HttpGet]
[Route("api/Login")]
[AllowAnonymous]
public string Login(string account, string password)
{
    if (account.Equals("Admin") && password.Equals("123456"))
    {
        FormsAuthenticationTicket ticketObject = new FormsAuthenticationTicket(0, account, DateTime.Now,
                    DateTime.Now.AddHours(1), true, string.Format("{0}&{1}", account, password),
                    FormsAuthentication.FormsCookiePath);
        var result = new { Result = true, Ticket = FormsAuthentication.Encrypt(ticketObject) };
        return JsonConvert.SerializeObject(result);
    }
    else
    {
        var result = new { Result = false };
        return JsonConvert.SerializeObject(result);
    }
}

浏览器客户端调用webapi时需要在执行ajax请求时向Request Header设置authorization: BasicAuth 票证Ticket； XHR.setRequestHeader('Authorization', 'BasicAuth ' + ticket);（可封装js）
//测试用户身份验证，有票证Ticket，可以验证通过
var ticket = "";//登陆后票证Ticket放在某个html里面，测试用，刷新页面将失效
$("#btnGet3").on("click", function () {
    $.ajax({
        url: '/api/ValuesGet/' + $("#txtId").val(), type: "get", 
        beforeSend: function (XHR) { //xhr XML Http Request
            //发送ajax请求之前向http的head里面加入验证信息，所有需要用户身份验证的ajax都要带上，可以封装js实现
            XHR.setRequestHeader('Authorization', 'BasicAuth ' + ticket);
        }, 
        success: function (data) {
            alert(data);
        }, datatype: "json"
    });
});

后端在带有 [BasicAuthorizeAttribute]特性api在被执行前会进行身份验证；[AllowAnonymous]特性跳过身份验证
/// <summary>
/// basic验证
/// </summary>
public class BasicAuthorizeAttribute : AuthorizeAttribute
{
    /// <summary>
    /// 发生请求前去完成验证
    /// </summary>
    /// <param name="actionContext"></param>
    public override void OnAuthorization(System.Web.Http.Controllers.HttpActionContext actionContext)
    {
        var authorization = actionContext.Request.Headers.Authorization;

        if (actionContext.ActionDescriptor.GetCustomAttributes<AllowAnonymousAttribute>(true).Count != 0
            || actionContext.ActionDescriptor.ControllerDescriptor.GetCustomAttributes<AllowAnonymousAttribute>(true).Count != 0)
        {
            base.OnAuthorization(actionContext);//正确的访问方法
        }
        else if (authorization != null && authorization.Parameter != null)
        {
            //用户验证逻辑
            if (ValidateTicket(authorization.Parameter))
            {
                base.IsAuthorized(actionContext);//正确的访问方法
            }
            else
            {
                this.HandleUnauthorizedRequest(actionContext);//没有权限
            }
        }
        else
        {
            this.HandleUnauthorizedRequest(actionContext);//没有权限
        }
    }

    protected override void HandleUnauthorizedRequest(System.Web.Http.Controllers.HttpActionContext actionContext)
    {
        var challengeMessage = new System.Net.Http.HttpResponseMessage(System.Net.HttpStatusCode.Unauthorized);//告诉浏览器要验证
        challengeMessage.Headers.Add("WWW-Authenticate", "Basic");//权限信息放在basic
        //throw new System.Web.Http.HttpResponseException(challengeMessage);

        base.HandleUnauthorizedRequest(actionContext);//返回没有授权
    }

    private bool ValidateTicket(string encryptTicket)
    {
        //解密Ticket
        var strTicket = FormsAuthentication.Decrypt(encryptTicket).UserData;
        return string.Equals(strTicket, string.Format("{0}&{1}", "Admin", "123456"));
        //应该分拆后去数据库验证
    }
}





****************************************分界线：了解WebApi异常处理
ExceptionFilterAttribute异常过滤器特性：可以在方法执行期间出现异常，被处理掉，有局限性:只有控制器实例化后，方法执行完之前，出现的异常才能被抓住
在WebApiConfig.cs Register方法中注册实现全部webapi异常捕获：config.Filters.Add(new CustomExceptionAttribute());
在控制器名上添加特性[CustomExceptionAttribute]实现该控制器注册webapi异常捕获。也可以单独对某api方法上添加特性[CustomExceptionAttribute]注册异常捕获
如果异常被try{}catch (Exception ex){}处理掉则ExceptionFilterAttribute异常过滤器特性将不会捕获到异常

public class CustomExceptionAttribute : ExceptionFilterAttribute
{
    /// <summary>
    /// api异常过滤器特性
    /// api在出现异常时触发（控制器构造异常无法捕获）
    /// 可以在这里写入异常日志
    /// </summary>
    /// <param name="actionExecutedContext"></param>
    public override void OnException(HttpActionExecutedContext actionExecutedContext)
    {
        Console.WriteLine($"{actionExecutedContext.Request.RequestUri.AbsoluteUri}:{actionExecutedContext.Exception.Message}");

        //把出现异常的api请求返回指定内容供前端解析
        actionExecutedContext.Response = actionExecutedContext.Request.CreateResponse(
            HttpStatusCode.OK, new
            {
                Result = false,
                Msg = $"{"请联系管理员:" + actionExecutedContext.Request.RequestUri.AbsoluteUri}:{actionExecutedContext.Exception.Message}"
            });

        //base.OnException(actionExecutedContext);
    }
}


全局异常处理：控制器实例化/方法错误 GlobalExceptionHandler : ExceptionHandler；不会覆盖异常过滤器特性CustomExceptionAttribute : ExceptionFilterAttribute
在WebApiConfig.cs Register方法中注册实现全部webapi全局异常捕获：config.Services.Replace(typeof(IExceptionHandler), new GlobalExceptionHandler());

/// <summary>
/// 全局异常处理
/// </summary>
public class GlobalExceptionHandler : ExceptionHandler
{
    ///// <summary>
    ///// 判断是不是要异常处理
    ///// </summary>
    ///// <param name="context"></param>
    ///// <returns></returns>
    //public override bool ShouldHandle(ExceptionHandlerContext context)
    //{
    //    return context.Request.RequestUri.AbsoluteUri.Contains("api") && base.ShouldHandle(context);
    //}

    /// <summary>
    /// 异常处理
    /// </summary>
    /// <param name="context"></param>
    public override void Handle(ExceptionHandlerContext context)
    {
        Console.WriteLine(context.Exception.Message);

        //把出现异常返回指定内容供前端解析
        context.Result = new ResponseMessageResult(context.Request.CreateResponse(
            HttpStatusCode.OK, new
            {
                Result = false,
                Msg = $"{"请联系管理员:" + context.Exception.Message}"
            }));
    }

}



****************************************分界线：了解WebApi ActionFilterAttribute
操作过滤器特性ActionFilterAttribute：可以在action执行前/后分别增加非业务逻辑
在WebApiConfig.cs Register方法中对全部webapi全部注册：config.Filters.Add(new CustomActionAttribute());
在控制器名上添加特性[CustomActionAttribute]实现该控制器下的所有方法注册。也可以单独对某api方法上添加特性[CustomActionAttribute]注册

public class CustomActionAttribute : ActionFilterAttribute
{
    /// <summary>
    /// 方法执行前
    /// </summary>
    /// <param name="actionContext"></param>
    public override void OnActionExecuting(HttpActionContext actionContext)
    {
        Console.WriteLine("OnActionExecuting" + actionContext.Request.RequestUri.AbsoluteUri);
        //可以完成数据验证
        //actionContext.ModelState.IsValid 方法执行前完成检测
        //actionContext.Response
        base.OnActionExecuting(actionContext);
    }

    /// <summary>
    /// 方法执行后
    /// </summary>
    /// <param name="actionExecutedContext"></param>
    public override void OnActionExecuted(HttpActionExecutedContext actionExecutedContext)
    {
        Console.WriteLine("OnActionExecuted");
        //actionExecutedContext.Response
        base.OnActionExecuted(actionExecutedContext);
    }
}





****************************************分界线：了解WebApi前端跨域问题
webapi:客户端请求，会有一个跨域问题。比如从9008向9099网站后台发起ajax请求---请求到了9099后台；
但是9008网站客户端请求的回调函数success没有执行无法获取数据；请求会报错 not allowed access   是由于浏览器的同源策略。
浏览器是一个应用程序，有很多限制，不能访问/使用电脑信息，只有临时文件夹(cookie)
网络请求：限制了js请求的结果使用，除非服务器允许(防钓鱼)，只有浏览器直接请求才会有跨域的问题

为什么一定要跨域？
多种域名 同一个数据源 不经过后台访问，前端直接访问后端api；就是了能分摊压力  一个页面其实有N多个请求，希望分一点到别的服务器

解决跨域请求的方法：
Jsonp   跨域请求  js不能直接跨域 但是浏览器自己可以通过标签去访问别的域名
用scripts标签请求数据---后台代码单独处理请求---返回业务数据--前端通过js获取标签内容--做个剪切
 
CORS 引用，指定下cors配置；或者在方法过滤器特性ActionFilterAttribute.actionexcuted中完成cors配置；就支持跨域
为了安全起见不建议全部允许跨域！！！


CORS实现操作方法：
服务端：
1.NuGet添加Microsoft.AspNet.WebApi.Cors
2.在WebApiConfig.cs Register方法中注册：config.EnableCors(new EnableCorsAttribute("*", "*", "*"))；所有域名能跨域访问WebApi
3.设置为只允许某域名能跨域访问WebApi：config.EnableCors(new EnableCorsAttribute("https://localhost:44315", "*", "*"));
4.设置多个域名能跨域访问WebApi，可用逗号隔开：config.EnableCors(new EnableCorsAttribute("https://localhost:57777,https://localhost:57447", "*", "*"));
5.通过配置文件设置跨域参数
配置文件添加
<appSettings>
    <add key = "cors:allowedOrigins" value = "https://localhost:44315" />
    <add key = "cors:allowedHeaders" value = "*" />
    <add key = "cors:allowedMethods" value = "*" />
<appSettings />
在WebApiConfig.cs Register方法中注册
string origins = ConfigurationManager.AppSettings["cors:allowedOrigins"];
string headers = ConfigurationManager.AppSettings["cors:allowedHeaders"];
string methods = ConfigurationManager.AppSettings["cors:allowedMethods"];
config.EnableCors(new EnableCorsAttribute(origins, headers, methods));

6.细粒度设置跨域
在WebApiConfig.cs Register方法中注册：config.EnableCors();
在指定api上添加特性[EnableCors(origins:"https://localhost:44315", headers:"*", methods:"*")]

客户端：










