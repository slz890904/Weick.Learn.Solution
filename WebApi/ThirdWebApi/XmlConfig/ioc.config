<?xml version="1.0" encoding="utf-8"?>
<unity>
  <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Unity.Interception.Configuration"/>
  <containers>
    <container name="IOCcontainer">
      <extension type="Interception"/>
      <register type="ThirdWebApi.Unity.Interface.DbContext,ThirdWebApi" mapTo="ThirdWebApi.Unity.Service.CustomDbContext, ThirdWebApi"/>
      <register type="ThirdWebApi.Unity.Interface.IUserService,ThirdWebApi" mapTo="ThirdWebApi.Unity.Service.UserService, ThirdWebApi">
      <interceptor type="InterfaceInterceptor"/>
          <interceptionBehavior type="ThirdWebApi.Unity.AOP.LogBeforeBehavior, ThirdWebApi"/>
      </register>
    </container>
  </containers>
</unity>




<!--
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Unity.Configuration"/>
  </configSections>
  <unity>
    <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Unity.Interception.Configuration"/>
    <containers>
      <container name="IOCcontainer">
        <extension type="Interception"/>
        <register type="ThirdWebApi.Unity.Interface.DbContext,ThirdWebApi" mapTo="ThirdWebApi.Unity.Service.CustomDbContext, ThirdWebApi"/>
        <register type="ThirdWebApi.Unity.Interface.IUserService,ThirdWebApi" mapTo="ThirdWebApi.Unity.Service.UserService, ThirdWebApi">

          <interceptor type="InterfaceInterceptor"/>
          <interceptionBehavior type="SOA.WebApi.Unity.AOP.LogBeforeBehavior, SOA.WebApi"/>
          <interceptionBehavior type="SOA.WebApi.Unity.AOP.LogAfterBehavior, SOA.WebApi"/>

        </register>
      </container>



    </containers>
  </unity>
</configuration>

-->