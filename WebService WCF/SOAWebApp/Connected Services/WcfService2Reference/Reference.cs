//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SOAWebApp.WcfService2Reference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfService2Reference.IContactService")]
    public interface IContactService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Add", ReplyAction="http://tempuri.org/IContactService/AddResponse")]
        int Add(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Add", ReplyAction="http://tempuri.org/IContactService/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Select", ReplyAction="http://tempuri.org/IContactService/SelectResponse")]
        WCFModel.Contact[] Select(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Select", ReplyAction="http://tempuri.org/IContactService/SelectResponse")]
        System.Threading.Tasks.Task<WCFModel.Contact[]> SelectAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Insert", ReplyAction="http://tempuri.org/IContactService/InsertResponse")]
        void Insert(WCFModel.Contact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Insert", ReplyAction="http://tempuri.org/IContactService/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(WCFModel.Contact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Update", ReplyAction="http://tempuri.org/IContactService/UpdateResponse")]
        void Update(WCFModel.Contact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Update", ReplyAction="http://tempuri.org/IContactService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(WCFModel.Contact contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Delete", ReplyAction="http://tempuri.org/IContactService/DeleteResponse")]
        void Delete(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactService/Delete", ReplyAction="http://tempuri.org/IContactService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContactServiceChannel : SOAWebApp.WcfService2Reference.IContactService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContactServiceClient : System.ServiceModel.ClientBase<SOAWebApp.WcfService2Reference.IContactService>, SOAWebApp.WcfService2Reference.IContactService {
        
        public ContactServiceClient() {
        }
        
        public ContactServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContactServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContactServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContactServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Add(int a, int b) {
            return base.Channel.Add(a, b);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(int a, int b) {
            return base.Channel.AddAsync(a, b);
        }
        
        public WCFModel.Contact[] Select(string id) {
            return base.Channel.Select(id);
        }
        
        public System.Threading.Tasks.Task<WCFModel.Contact[]> SelectAsync(string id) {
            return base.Channel.SelectAsync(id);
        }
        
        public void Insert(WCFModel.Contact contact) {
            base.Channel.Insert(contact);
        }
        
        public System.Threading.Tasks.Task InsertAsync(WCFModel.Contact contact) {
            return base.Channel.InsertAsync(contact);
        }
        
        public void Update(WCFModel.Contact contact) {
            base.Channel.Update(contact);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(WCFModel.Contact contact) {
            return base.Channel.UpdateAsync(contact);
        }
        
        public void Delete(string id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(string id) {
            return base.Channel.DeleteAsync(id);
        }
    }
}
